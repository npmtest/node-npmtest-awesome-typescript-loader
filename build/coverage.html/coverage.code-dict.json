{"/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/test.js":"/* istanbul instrument in package npmtest_awesome_typescript_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/lib.npmtest_awesome_typescript_loader.js":"/* istanbul instrument in package npmtest_awesome_typescript_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_awesome_typescript_loader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_awesome_typescript_loader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-awesome-typescript-loader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_awesome_typescript_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_awesome_typescript_loader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_awesome_typescript_loader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_awesome_typescript_loader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_awesome_typescript_loader.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_awesome_typescript_loader.__dirname + '/lib.npmtest_awesome_typescript_loader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/node_modules/awesome-typescript-loader/dist/entry.js":"require('source-map-support').install();\nmodule.exports = require('./index');\n//# sourceMappingURL=entry.js.map","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/node_modules/awesome-typescript-loader/dist/index.js":"\"use strict\";\nvar _ = require(\"lodash\");\nvar path = require(\"path\");\nvar fs = require(\"fs\");\nvar cache_1 = require(\"./cache\");\nvar helpers = require(\"./helpers\");\nvar instance_1 = require(\"./instance\");\nvar paths_plugin_1 = require(\"./paths-plugin\");\nvar watch_mode_1 = require(\"./watch-mode\");\nvar loaderUtils = require('loader-utils');\nvar mkdirp = require('mkdirp');\nfunction loader(text) {\n    try {\n        compiler.call(undefined, this, text);\n    }\n    catch (e) {\n        console.error(e, e.stack);\n        throw e;\n    }\n}\n(function (loader) {\n    loader.TsConfigPathsPlugin = paths_plugin_1.PathPlugin;\n    loader.CheckerPlugin = watch_mode_1.CheckerPlugin;\n})(loader || (loader = {}));\nvar DECLARATION = /\\.d.ts$/i;\nfunction compiler(loader, text) {\n    if (loader.cacheable) {\n        loader.cacheable();\n    }\n    var rootCompiler = instance_1.getRootCompiler(loader._compiler);\n    var query = (loaderUtils.getOptions(loader) || {});\n    var options = (loader.options && loader.options.ts) || {};\n    var instanceName = query.instance || 'at-loader';\n    var instance = instance_1.ensureInstance(loader, query, options, instanceName, rootCompiler);\n    var callback = loader.async();\n    var fileName = helpers.toUnix(loader.resourcePath);\n    instance.compiledFiles[fileName] = true;\n    if (DECLARATION.test(fileName)) {\n        loader.emitWarning(\"[\" + instanceName + \"] TypeScript declaration files should never be required\");\n        return callback(null, '');\n    }\n    var compiledModule;\n    if (instance.loaderConfig.usePrecompiledFiles) {\n        compiledModule = cache_1.findCompiledModule(fileName);\n    }\n    var transformation = null;\n    if (compiledModule) {\n        transformation = Promise.resolve({\n            text: compiledModule.text,\n            map: compiledModule.map\n                ? JSON.parse(compiledModule.map)\n                : null\n        }).then(function (result) { return ({ cached: true, result: result }); });\n    }\n    else {\n        var transformationFunction = function () { return transform(loader, instance, fileName, text); };\n        if (instance.loaderConfig.useCache) {\n            transformation = cache_1.cache({\n                source: text,\n                identifier: instance.cacheIdentifier,\n                directory: instance.loaderConfig.cacheDirectory,\n                options: loader.query,\n                transform: transformationFunction\n            });\n        }\n        else {\n            transformation = transformationFunction().then(function (result) { return ({ cached: false, result: result }); });\n        }\n    }\n    transformation\n        .then(function (_a) {\n        var cached = _a.cached, result = _a.result;\n        if (!instance.compilerConfig.options.isolatedModules && result.deps) {\n            result.deps.forEach(function (dep) { return loader.addDependency(path.normalize(dep)); });\n        }\n        if (cached) {\n            instance.checker.updateFile(fileName, text);\n        }\n        return result;\n    })\n        .then(function (_a) {\n        var text = _a.text, map = _a.map;\n        callback(null, text, map);\n    })\n        .catch(callback)\n        .catch(function (e) {\n        console.error('Error in bail mode:', e, e.stack.join\n            ? e.stack.join('\\n')\n            : e.stack);\n        process.exit(1);\n    });\n}\nfunction transform(webpack, instance, fileName, text) {\n    var resultText;\n    var resultSourceMap = null;\n    return instance.checker.emitFile(fileName, text).then((function (_a) {\n        var emitResult = _a.emitResult, deps = _a.deps;\n        resultSourceMap = emitResult.sourceMap;\n        resultText = emitResult.text;\n        var sourceFileName = fileName.replace(instance.context + '/', '');\n        if (resultSourceMap) {\n            resultSourceMap = JSON.parse(resultSourceMap);\n            resultSourceMap.sources = [sourceFileName];\n            resultSourceMap.file = sourceFileName;\n            resultSourceMap.sourcesContent = [text];\n            resultText = resultText.replace(/^\\/\\/# sourceMappingURL=[^\\r\\n]*/gm, '');\n        }\n        if (instance.loaderConfig.useBabel) {\n            var defaultOptions = {\n                inputSourceMap: resultSourceMap,\n                sourceRoot: instance.context,\n                filename: fileName,\n                sourceMap: true\n            };\n            var babelOptions = _.assign({}, defaultOptions, instance.loaderConfig.babelOptions);\n            var babelResult = instance.babelImpl.transform(resultText, babelOptions);\n            resultText = babelResult.code;\n            resultSourceMap = babelResult.map;\n        }\n        if (resultSourceMap) {\n            var sourcePath = path.relative(instance.compilerConfig.options.sourceRoot || instance.context, loaderUtils.getRemainingRequest(webpack));\n            resultSourceMap.sources = [sourcePath];\n            resultSourceMap.file = fileName;\n            resultSourceMap.sourcesContent = [text];\n        }\n        if (emitResult.declaration) {\n            mkdirp.sync(path.dirname(emitResult.declaration.name));\n            fs.writeFileSync(emitResult.declaration.name, emitResult.declaration.text);\n        }\n        return {\n            text: resultText,\n            map: resultSourceMap,\n            deps: deps,\n        };\n    }));\n}\nmodule.exports = loader;\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/node_modules/awesome-typescript-loader/dist/cache.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs = require(\"fs\");\nvar os = require(\"os\");\nvar path = require(\"path\");\nvar zlib = require(\"zlib\");\nvar crypto_1 = require(\"crypto\");\nfunction findCompiledModule(fileName) {\n    var baseFileName = fileName.replace(/(\\.ts|\\.tsx)$/, '');\n    var compiledFileName = baseFileName + \".js\";\n    if (fs.existsSync(compiledFileName)) {\n        var mapFileName = baseFileName + \".js.map\";\n        var isMapExists = fs.existsSync(mapFileName);\n        var result = {\n            fileName: compiledFileName,\n            text: fs.readFileSync(compiledFileName).toString(),\n            mapName: isMapExists\n                ? mapFileName\n                : null,\n            map: isMapExists\n                ? fs.readFileSync(mapFileName).toString()\n                : null\n        };\n        return result;\n    }\n    else {\n        return null;\n    }\n}\nexports.findCompiledModule = findCompiledModule;\nfunction read(filename) {\n    var content = fs.readFileSync(filename);\n    var jsonString = zlib.gunzipSync(content);\n    return JSON.parse(jsonString.toString());\n}\nfunction write(filename, result) {\n    var jsonString = JSON.stringify(result);\n    var content = zlib.gzipSync(jsonString);\n    return fs.writeFileSync(filename, content);\n}\nfunction filename(source, identifier, options) {\n    var hash = crypto_1.createHash('sha512');\n    var contents = JSON.stringify({\n        identifier: identifier,\n        options: options,\n        source: source,\n    });\n    hash.end(contents);\n    return hash.read().toString('hex') + '.json.gzip';\n}\n;\nfunction cache(params) {\n    var source = params.source;\n    var options = params.options || {};\n    var transform = params.transform;\n    var identifier = params.identifier;\n    var directory = (typeof params.directory === 'string') ?\n        params.directory :\n        os.tmpdir();\n    var file = path.join(directory, filename(source, identifier, options));\n    try {\n        return Promise.resolve({ cached: true, result: read(file) });\n    }\n    catch (e) {\n        return transform().then(function (result) {\n            write(file, result);\n            return { cached: false, result: result };\n        });\n    }\n}\nexports.cache = cache;\n//# sourceMappingURL=cache.js.map","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/node_modules/awesome-typescript-loader/dist/helpers.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar double = /\\/\\//;\nfunction toUnix(fileName) {\n    var res = fileName.replace(/\\\\/g, '/');\n    while (res.match(double)) {\n        res = res.replace(double, '/');\n    }\n    return res;\n}\nexports.toUnix = toUnix;\nfunction withoutExt(fileName) {\n    return path.basename(fileName).split('.')[0];\n}\nfunction isFileEmit(fileName, outputFileName, sourceFileName) {\n    return sourceFileName === fileName\n        && (outputFileName.substr(-3) === '.js' || outputFileName.substr(-4) === '.jsx');\n}\nfunction isSourceMapEmit(fileName, outputFileName, sourceFileName) {\n    return sourceFileName === fileName\n        && (outputFileName.substr(-7) === '.js.map' || outputFileName.substr(-8) === '.jsx.map');\n}\nfunction isDeclarationEmit(fileName, outputFileName, sourceFileName) {\n    return sourceFileName === fileName\n        && (outputFileName.substr(-5) === '.d.ts');\n}\nfunction findResultFor(fileName, output) {\n    var text;\n    var sourceMap;\n    var declaration;\n    fileName = withoutExt(fileName);\n    for (var i = 0; i < output.outputFiles.length; i++) {\n        var o = output.outputFiles[i];\n        var outputFileName = o.name;\n        var sourceFileName = withoutExt(o.name);\n        if (isFileEmit(fileName, outputFileName, sourceFileName)) {\n            text = o.text;\n        }\n        if (isSourceMapEmit(fileName, outputFileName, sourceFileName)) {\n            sourceMap = o.text;\n        }\n        if (isDeclarationEmit(fileName, outputFileName, sourceFileName)) {\n            declaration = o;\n        }\n    }\n    return {\n        text: text,\n        sourceMap: sourceMap,\n        declaration: declaration\n    };\n}\nexports.findResultFor = findResultFor;\nfunction codegenErrorReport(errors) {\n    return errors\n        .map(function (error) {\n        return 'console.error(' + JSON.stringify(error) + ');';\n    })\n        .join('\\n');\n}\nexports.codegenErrorReport = codegenErrorReport;\nfunction formatError(diagnostic) {\n    var lineChar;\n    if (diagnostic.file) {\n        lineChar = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n    }\n    return ((diagnostic.file ? path.normalize(diagnostic.file.fileName) : '')\n        + (lineChar ? formatLineChar(lineChar) + ' ' : '') + \"\\n\"\n        + (typeof diagnostic.messageText == \"string\" ?\n            diagnostic.messageText :\n            formatMessageChain(diagnostic.messageText)));\n}\nexports.formatError = formatError;\nfunction formatMessageChain(chain) {\n    var result = \"\";\n    var separator = \"\\n  \";\n    var current = chain;\n    while (current) {\n        result += current.messageText;\n        if (!!current.next) {\n            result += separator;\n            separator += \"  \";\n        }\n        current = current.next;\n    }\n    return result;\n}\nexports.formatMessageChain = formatMessageChain;\nfunction formatLineChar(lineChar) {\n    return ':' + (lineChar.line + 1) + ':' + lineChar.character;\n}\nexports.formatLineChar = formatLineChar;\nfunction loadLib(moduleId) {\n    var fileName = require.resolve(moduleId);\n    var text = fs.readFileSync(fileName, 'utf8');\n    return {\n        fileName: fileName,\n        text: text\n    };\n}\nexports.loadLib = loadLib;\nvar TYPESCRIPT_EXTENSION = /\\.(d\\.)?(t|j)s$/;\nfunction withoutTypeScriptExtension(fileName) {\n    return fileName.replace(TYPESCRIPT_EXTENSION, '');\n}\nexports.withoutTypeScriptExtension = withoutTypeScriptExtension;\n//# sourceMappingURL=helpers.js.map","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/node_modules/awesome-typescript-loader/dist/instance.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar _ = require(\"lodash\");\nvar helpers_1 = require(\"./helpers\");\nvar checker_1 = require(\"./checker\");\nvar watch_mode_1 = require(\"./watch-mode\");\nvar colors = require('colors/safe');\nvar pkg = require('../package.json');\nvar mkdirp = require('mkdirp');\nfunction getRootCompiler(compiler) {\n    if (compiler.parentCompilation) {\n        return getRootCompiler(compiler.parentCompilation.compiler);\n    }\n    else {\n        return compiler;\n    }\n}\nexports.getRootCompiler = getRootCompiler;\nfunction resolveInstance(compiler, instanceName) {\n    if (!compiler._tsInstances) {\n        compiler._tsInstances = {};\n    }\n    return compiler._tsInstances[instanceName];\n}\nvar COMPILER_ERROR = colors.red(\"\\n\\nTypescript compiler cannot be found, please add it to your package.json file:\\n    npm install --save-dev typescript\\n\");\nvar BABEL_ERROR = colors.red(\"\\n\\nBabel compiler cannot be found, please add it to your package.json file:\\n    npm install --save-dev babel-core\\n\");\nvar id = 0;\nfunction ensureInstance(webpack, query, options, instanceName, rootCompiler) {\n    var exInstance = resolveInstance(rootCompiler, instanceName);\n    if (exInstance) {\n        return exInstance;\n    }\n    var watching = isWatching(rootCompiler);\n    var context = process.cwd();\n    var compilerInfo = setupTs(query.compiler);\n    var tsImpl = compilerInfo.tsImpl;\n    var _a = readConfigFile(context, query, options, tsImpl), configFilePath = _a.configFilePath, compilerConfig = _a.compilerConfig, loaderConfig = _a.loaderConfig;\n    applyDefaults(configFilePath, compilerConfig, loaderConfig, context);\n    if (!loaderConfig.silent) {\n        var sync = watching === WatchMode.Enabled ? ' (in a forked process)' : '';\n        console.log(\"\\n[\" + instanceName + \"] Using typescript@\" + compilerInfo.compilerVersion + \" from \" + compilerInfo.compilerPath + \" and \"\n            + (\"\\\"tsconfig.json\\\" from \" + configFilePath + sync + \".\\n\"));\n    }\n    var babelImpl = setupBabel(loaderConfig, context);\n    var cacheIdentifier = setupCache(loaderConfig, tsImpl, webpack, babelImpl, context);\n    var compiler = webpack._compiler;\n    setupWatchRun(compiler, instanceName);\n    setupAfterCompile(compiler, instanceName);\n    var webpackOptions = _.pick(webpack._compiler.options, 'resolve');\n    var checker = new checker_1.Checker(compilerInfo, loaderConfig, compilerConfig, webpackOptions, context, watching === WatchMode.Enabled);\n    return rootCompiler._tsInstances[instanceName] = {\n        id: ++id,\n        babelImpl: babelImpl,\n        compiledFiles: {},\n        loaderConfig: loaderConfig,\n        configFilePath: configFilePath,\n        compilerConfig: compilerConfig,\n        checker: checker,\n        cacheIdentifier: cacheIdentifier,\n        context: context\n    };\n}\nexports.ensureInstance = ensureInstance;\nfunction findTsImplPackage(inputPath) {\n    var pkgDir = path.dirname(inputPath);\n    if (fs.readdirSync(pkgDir).find(function (value) { return value === 'package.json'; })) {\n        return path.join(pkgDir, 'package.json');\n    }\n    else {\n        return findTsImplPackage(pkgDir);\n    }\n}\nfunction setupTs(compiler) {\n    var compilerPath = compiler || 'typescript';\n    var tsImpl;\n    var tsImplPath;\n    try {\n        tsImplPath = require.resolve(compilerPath);\n        tsImpl = require(tsImplPath);\n    }\n    catch (e) {\n        console.error(e);\n        console.error(COMPILER_ERROR);\n        process.exit(1);\n    }\n    var pkgPath = findTsImplPackage(tsImplPath);\n    var compilerVersion = require(pkgPath).version;\n    var compilerInfo = {\n        compilerPath: compilerPath,\n        compilerVersion: compilerVersion,\n        tsImpl: tsImpl,\n    };\n    return compilerInfo;\n}\nexports.setupTs = setupTs;\nfunction setupCache(loaderConfig, tsImpl, webpack, babelImpl, context) {\n    var cacheIdentifier = null;\n    if (loaderConfig.useCache) {\n        if (!loaderConfig.cacheDirectory) {\n            loaderConfig.cacheDirectory = path.join(context, '.awcache');\n        }\n        if (!fs.existsSync(loaderConfig.cacheDirectory)) {\n            mkdirp.sync(loaderConfig.cacheDirectory);\n        }\n        cacheIdentifier = {\n            'typescript': tsImpl.version,\n            'awesome-typescript-loader': pkg.version,\n            'awesome-typescript-loader-query': webpack.query,\n            'babel-core': babelImpl\n                ? babelImpl.version\n                : null\n        };\n    }\n}\nfunction setupBabel(loaderConfig, context) {\n    var babelImpl;\n    if (loaderConfig.useBabel) {\n        try {\n            var babelPath = loaderConfig.babelCore || path.join(context, 'node_modules', 'babel-core');\n            babelImpl = require(babelPath);\n        }\n        catch (e) {\n            console.error(BABEL_ERROR);\n            process.exit(1);\n        }\n    }\n    return babelImpl;\n}\nfunction applyDefaults(configFilePath, compilerConfig, loaderConfig, context) {\n    var def = {\n        sourceMap: true,\n        verbose: false,\n        skipDefaultLibCheck: true,\n        suppressOutputPathCheck: true\n    };\n    if (compilerConfig.options.outDir && compilerConfig.options.declaration) {\n        def.declarationDir = compilerConfig.options.outDir;\n    }\n    _.defaults(compilerConfig.options, def);\n    if (loaderConfig.transpileOnly) {\n        compilerConfig.options.isolatedModules = true;\n    }\n    _.defaults(compilerConfig.options, {\n        sourceRoot: compilerConfig.options.sourceMap ? context : undefined\n    });\n    _.defaults(loaderConfig, {\n        sourceMap: true,\n        verbose: false,\n    });\n    delete compilerConfig.options.outDir;\n    delete compilerConfig.options.outFile;\n    delete compilerConfig.options.out;\n    delete compilerConfig.options.noEmit;\n}\nfunction absolutize(fileName, context) {\n    if (path.isAbsolute(fileName)) {\n        return fileName;\n    }\n    else {\n        return path.join(context, fileName);\n    }\n}\nfunction readConfigFile(context, query, options, tsImpl) {\n    var configFilePath;\n    if (query.configFileName && query.configFileName.match(/\\.json$/)) {\n        configFilePath = absolutize(query.configFileName, context);\n    }\n    else {\n        configFilePath = tsImpl.findConfigFile(context, tsImpl.sys.fileExists);\n    }\n    var existingOptions = tsImpl.convertCompilerOptionsFromJson(query, context, 'atl.query');\n    if (!configFilePath || query.configFileContent) {\n        return {\n            configFilePath: configFilePath || path.join(context, 'tsconfig.json'),\n            compilerConfig: tsImpl.parseJsonConfigFileContent(query.configFileContent || {}, tsImpl.sys, context, _.extend({}, tsImpl.getDefaultCompilerOptions(), existingOptions.options), context),\n            loaderConfig: query\n        };\n    }\n    var jsonConfigFile = tsImpl.readConfigFile(configFilePath, tsImpl.sys.readFile);\n    var compilerConfig = tsImpl.parseJsonConfigFileContent(jsonConfigFile.config, tsImpl.sys, path.dirname(configFilePath), existingOptions.options, configFilePath);\n    return {\n        configFilePath: configFilePath,\n        compilerConfig: compilerConfig,\n        loaderConfig: _.defaults(query, jsonConfigFile.config.awesomeTypescriptLoaderOptions, options)\n    };\n}\nexports.readConfigFile = readConfigFile;\nvar EXTENSIONS = /\\.tsx?$|\\.jsx?$/;\nfunction setupWatchRun(compiler, instanceName) {\n    compiler.plugin('watch-run', function (watching, callback) {\n        var instance = resolveInstance(watching.compiler, instanceName);\n        var checker = instance.checker;\n        var watcher = watching.compiler.watchFileSystem.watcher\n            || watching.compiler.watchFileSystem.wfs.watcher;\n        var mtimes = watcher.mtimes || (watcher.getTimes && watcher.getTimes()) || {};\n        var changedFiles = Object.keys(mtimes).map(helpers_1.toUnix);\n        var updates = changedFiles\n            .filter(function (file) { return EXTENSIONS.test(file); })\n            .map(function (changedFile) {\n            if (fs.existsSync(changedFile)) {\n                checker.updateFile(changedFile, fs.readFileSync(changedFile).toString(), true);\n            }\n            else {\n                checker.removeFile(changedFile);\n            }\n        });\n        Promise.all(updates)\n            .then(function () { return callback(); })\n            .catch(callback);\n    });\n}\nvar WatchMode;\n(function (WatchMode) {\n    WatchMode[WatchMode[\"Enabled\"] = 0] = \"Enabled\";\n    WatchMode[WatchMode[\"Disabled\"] = 1] = \"Disabled\";\n    WatchMode[WatchMode[\"Unknown\"] = 2] = \"Unknown\";\n})(WatchMode || (WatchMode = {}));\nfunction isWatching(compiler) {\n    var value = compiler && compiler[watch_mode_1.WatchModeSymbol];\n    if (value === true) {\n        return WatchMode.Enabled;\n    }\n    else if (value === false) {\n        return WatchMode.Disabled;\n    }\n    else {\n        return WatchMode.Unknown;\n    }\n}\nfunction setupAfterCompile(compiler, instanceName, forkChecker) {\n    if (forkChecker === void 0) { forkChecker = false; }\n    compiler.plugin('after-compile', function (compilation, callback) {\n        if (compilation.compiler.isChild()) {\n            callback();\n            return;\n        }\n        var watchMode = isWatching(compilation.compiler);\n        var instance = resolveInstance(compilation.compiler, instanceName);\n        var silent = instance.loaderConfig.silent;\n        var asyncErrors = watchMode === WatchMode.Enabled && !silent;\n        var emitError = function (msg) {\n            if (compilation.bail) {\n                console.error('Error in bail mode:', msg);\n                process.exit(1);\n            }\n            if (asyncErrors) {\n                console.log(msg, '\\n');\n            }\n            else {\n                compilation.errors.push(new Error(msg));\n            }\n        };\n        instance.compiledFiles = {};\n        var files = instance.checker.getFiles()\n            .then(function (_a) {\n            var files = _a.files;\n            Array.prototype.push.apply(compilation.fileDependencies, files.map(path.normalize));\n        });\n        var diag = instance.loaderConfig.transpileOnly\n            ? Promise.resolve()\n            : instance.checker.getDiagnostics()\n                .then(function (diags) {\n                diags.forEach(function (diag) { return emitError(diag.pretty); });\n            });\n        files\n            .then(function () {\n            if (asyncErrors) {\n                return;\n            }\n            else {\n                return diag;\n            }\n        })\n            .then(function () { return callback(); })\n            .catch(callback);\n    });\n}\n//# sourceMappingURL=instance.js.map","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/node_modules/awesome-typescript-loader/dist/checker/index.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar checker_1 = require(\"./checker\");\nexports.Checker = checker_1.Checker;\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/node_modules/awesome-typescript-loader/dist/checker/checker.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"lodash\");\nvar childProcess = require(\"child_process\");\nvar path = require(\"path\");\nvar send_1 = require(\"./send\");\nvar Checker = (function () {\n    function Checker(compilerInfo, loaderConfig, compilerConfig, webpackOptions, context, fork) {\n        if (fork === void 0) { fork = false; }\n        var _this = this;\n        this.seq = 0;\n        this.pending = new Map();\n        var execArgv = getExecArgv();\n        var checker = fork\n            ? childProcess.fork(path.join(__dirname, 'runtime.js'), [], { execArgv: execArgv })\n            : require('./runtime').run();\n        this.sender = fork\n            ? send_1.createQueuedSender(checker)\n            : { send: checker.send };\n        this.checker = checker;\n        this.compilerInfo = compilerInfo;\n        this.loaderConfig = loaderConfig;\n        this.compilerConfig = compilerConfig;\n        this.webpackOptions = webpackOptions;\n        checker.on('error', function (e) {\n            console.error('Typescript checker error:', e);\n        });\n        checker.on('message', function (res) {\n            var seq = res.seq, success = res.success, payload = res.payload;\n            if (seq && _this.pending.has(seq)) {\n                var resolver = _this.pending.get(seq);\n                if (success) {\n                    resolver.resolve(payload);\n                }\n                else {\n                    resolver.reject(payload);\n                }\n                _this.pending.delete(seq);\n            }\n            else {\n                console.warn('Unknown message: ', payload);\n            }\n        });\n        this.req({\n            type: 'Init',\n            payload: {\n                compilerInfo: _.omit(compilerInfo, 'tsImpl'),\n                loaderConfig: loaderConfig,\n                compilerConfig: compilerConfig,\n                webpackOptions: webpackOptions,\n                context: context\n            }\n        });\n    }\n    Checker.prototype.req = function (message) {\n        var _this = this;\n        message.seq = ++this.seq;\n        var promise = new Promise(function (resolve, reject) {\n            var resolver = {\n                resolve: resolve, reject: reject\n            };\n            _this.pending.set(message.seq, resolver);\n        });\n        this.sender.send(message);\n        return promise;\n    };\n    Checker.prototype.emitFile = function (fileName, text) {\n        return this.req({\n            type: 'EmitFile',\n            payload: {\n                fileName: fileName,\n                text: text\n            }\n        });\n    };\n    Checker.prototype.updateFile = function (fileName, text, ifExist) {\n        if (ifExist === void 0) { ifExist = false; }\n        return this.req({\n            type: 'UpdateFile',\n            payload: {\n                fileName: fileName,\n                text: text,\n                ifExist: ifExist\n            }\n        });\n    };\n    Checker.prototype.removeFile = function (fileName) {\n        return this.req({\n            type: 'RemoveFile',\n            payload: {\n                fileName: fileName,\n            }\n        });\n    };\n    Checker.prototype.getDiagnostics = function () {\n        return this.req({\n            type: 'Diagnostics'\n        });\n    };\n    Checker.prototype.getFiles = function () {\n        return this.req({\n            type: 'Files'\n        });\n    };\n    Checker.prototype.kill = function () {\n        this.checker.kill('SIGKILL');\n    };\n    return Checker;\n}());\nexports.Checker = Checker;\nfunction getExecArgv() {\n    var execArgv = [];\n    for (var _i = 0, _a = process.execArgv; _i < _a.length; _i++) {\n        var arg = _a[_i];\n        var match = /^--(debug|inspect)(=(\\d+))?$/.exec(arg);\n        if (match) {\n            var currentPort = match[3] !== undefined ? +match[3] : match[1] === \"debug\" ? 5858 : 9229;\n            execArgv.push(\"--\" + match[1] + \"=\" + (currentPort + 1));\n            break;\n        }\n    }\n    return execArgv;\n}\n//# sourceMappingURL=checker.js.map","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/node_modules/awesome-typescript-loader/dist/checker/send.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isWindows = /^win/.test(process.platform);\nvar logOnError = function (error) { if (error) {\n    console.error(error);\n} };\nfunction createQueuedSender(childProcess) {\n    if (isWindows) {\n        var msgQueue_1 = [];\n        var isSending_1 = false;\n        var cb_1 = function (error) {\n            logOnError(error);\n            if (msgQueue_1.length > 0) {\n                setImmediate(doSendLoop_1);\n            }\n            else {\n                isSending_1 = false;\n            }\n        };\n        var doSendLoop_1 = function () {\n            childProcess.send(msgQueue_1.shift(), cb_1);\n        };\n        var send = function (msg) {\n            msgQueue_1.push(msg);\n            if (isSending_1) {\n                return;\n            }\n            isSending_1 = true;\n            doSendLoop_1();\n        };\n        return { send: send };\n    }\n    else {\n        var send = function (msg) {\n            childProcess.send(msg, logOnError);\n        };\n        return { send: send };\n    }\n}\nexports.createQueuedSender = createQueuedSender;\n//# sourceMappingURL=send.js.map","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/node_modules/awesome-typescript-loader/dist/watch-mode.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WatchModeSymbol = Symbol('WatchMode');\nvar CheckerPlugin = (function () {\n    function CheckerPlugin() {\n    }\n    CheckerPlugin.prototype.apply = function (compiler) {\n        compiler.plugin(\"run\", function (params, callback) {\n            compiler[exports.WatchModeSymbol] = false;\n            callback();\n        });\n        compiler.plugin(\"watch-run\", function (params, callback) {\n            compiler[exports.WatchModeSymbol] = true;\n            callback();\n        });\n    };\n    return CheckerPlugin;\n}());\nexports.CheckerPlugin = CheckerPlugin;\n//# sourceMappingURL=watch-mode.js.map","/home/travis/build/npmtest/node-npmtest-awesome-typescript-loader/node_modules/awesome-typescript-loader/dist/paths-plugin.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_1 = require(\"./instance\");\nvar path = require(\"path\");\nvar _ = require(\"lodash\");\nvar ModulesInRootPlugin = require('enhanced-resolve/lib/ModulesInRootPlugin');\nvar createInnerCallback = require('enhanced-resolve/lib/createInnerCallback');\nvar getInnerRequest = require('enhanced-resolve/lib/getInnerRequest');\nfunction escapeRegExp(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nvar PathPlugin = (function () {\n    function PathPlugin(config) {\n        if (config === void 0) { config = {}; }\n        var _this = this;\n        this.source = 'described-resolve';\n        this.target = 'resolve';\n        this.ts = instance_1.setupTs(config.compiler).tsImpl;\n        var context = config.context || process.cwd();\n        var _a = instance_1.readConfigFile(context, config, {}, this.ts), configFilePath = _a.configFilePath, compilerConfig = _a.compilerConfig;\n        this.options = compilerConfig.options;\n        this.configFilePath = configFilePath;\n        this.baseUrl = this.options.baseUrl;\n        this.absoluteBaseUrl = path.resolve(path.dirname(this.configFilePath), this.baseUrl || '.');\n        this.mappings = [];\n        var paths = this.options.paths || {};\n        Object.keys(paths).forEach(function (alias) {\n            var onlyModule = alias.indexOf('*') === -1;\n            var excapedAlias = escapeRegExp(alias);\n            var targets = paths[alias];\n            targets.forEach(function (target) {\n                var aliasPattern;\n                if (onlyModule) {\n                    aliasPattern = new RegExp(\"^\" + excapedAlias + \"$\");\n                }\n                else {\n                    var withStarCapturing = excapedAlias.replace('\\\\*', '(.*)');\n                    aliasPattern = new RegExp(\"^\" + withStarCapturing);\n                }\n                _this.mappings.push({\n                    onlyModule: onlyModule,\n                    alias: alias,\n                    aliasPattern: aliasPattern,\n                    target: target\n                });\n            });\n        });\n    }\n    PathPlugin.prototype.apply = function (resolver) {\n        var _this = this;\n        var _a = this, baseUrl = _a.baseUrl, mappings = _a.mappings;\n        if (baseUrl) {\n            resolver.apply(new ModulesInRootPlugin(\"module\", this.absoluteBaseUrl, \"resolve\"));\n        }\n        mappings.forEach(function (mapping) {\n            resolver.plugin(_this.source, _this.createPlugin(resolver, mapping));\n        });\n    };\n    PathPlugin.prototype.createPlugin = function (resolver, mapping) {\n        var _this = this;\n        return function (request, callback) {\n            var innerRequest = getInnerRequest(resolver, request);\n            if (!innerRequest) {\n                return callback();\n            }\n            var match = innerRequest.match(mapping.aliasPattern);\n            if (!match) {\n                return callback();\n            }\n            var newRequestStr = mapping.target;\n            if (!mapping.onlyModule) {\n                newRequestStr = newRequestStr.replace('*', match[1]);\n            }\n            if (newRequestStr[0] === '.') {\n                newRequestStr = path.resolve(_this.absoluteBaseUrl, newRequestStr);\n            }\n            var newRequest = _.extend({}, request, {\n                request: newRequestStr\n            });\n            return resolver.doResolve(_this.target, newRequest, \"aliased with mapping '\" + innerRequest + \"': '\" + mapping.alias + \"' to '\" + newRequestStr + \"'\", createInnerCallback(function (err, result) {\n                if (arguments.length > 0) {\n                    return callback(err, result);\n                }\n                callback(null, null);\n            }, callback));\n        };\n    };\n    return PathPlugin;\n}());\nexports.PathPlugin = PathPlugin;\n//# sourceMappingURL=paths-plugin.js.map"}